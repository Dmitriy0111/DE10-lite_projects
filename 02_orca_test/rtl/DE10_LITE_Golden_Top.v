//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
`define ENABLE_CLOCK2
`define ENABLE_SDRAM
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
`define ENABLE_VGA
`define ENABLE_ACCELEROMETER
`define ENABLE_ARDUINO
`define ENABLE_GPIO
`define CAM

module DE10_LITE_Golden_Top(

    //////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
    input                       ADC_CLK_10,
`endif
    //////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
    input                       MAX10_CLK1_50,
`endif
    //////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
    input                       MAX10_CLK2_50,
`endif

    //////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
    output          [12:0]      DRAM_ADDR,
    output           [1:0]      DRAM_BA,
    output                      DRAM_CAS_N,
    output                      DRAM_CKE,
    output                      DRAM_CLK,
    output                      DRAM_CS_N,
    inout           [15:0]      DRAM_DQ,
    output                      DRAM_LDQM,
    output                      DRAM_RAS_N,
    output                      DRAM_UDQM,
    output                      DRAM_WE_N,
`endif

    //////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
    output          [7:0]       HEX0,
`endif
`ifdef ENABLE_HEX1
    output          [7:0]       HEX1,
`endif
`ifdef ENABLE_HEX2
    output          [7:0]       HEX2,
`endif
`ifdef ENABLE_HEX3
    output          [7:0]       HEX3,
`endif
`ifdef ENABLE_HEX4
    output          [7:0]       HEX4,
`endif
`ifdef ENABLE_HEX5
    output          [7:0]       HEX5,
`endif

    //////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
    input           [1:0]       KEY,
`endif

    //////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
    output          [9:0]       LEDR,
`endif

    //////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
    input           [9:0]       SW,
`endif

    //////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
    output           [3:0]      VGA_B,
    output           [3:0]      VGA_G,
    output                      VGA_HS,
    output           [3:0]      VGA_R,
    output                      VGA_VS,
`endif

    //////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
    output                      GSENSOR_CS_N,
    input            [2:1]      GSENSOR_INT,
    output                      GSENSOR_SCLK,
    inout                       GSENSOR_SDI,
    inout                       GSENSOR_SDO,
`endif

    //////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
    inout           [15:0]      ARDUINO_IO,
    inout                       ARDUINO_RESET_N,
`endif

    //////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
    inout           [35:0]      GPIO
`endif
);

//=======================================================
//  REG/WIRE declarations
//=======================================================

    localparam              width = 32;

    logic   [0       : 0]   clk;
    logic   [0       : 0]   rstn;
    logic   [0       : 0]   dir;
    logic   [0       : 0]   en;
    logic   [width-1 : 0]   cnt;
    logic   [0       : 0]   i2c_0_sda_in;
    logic   [0       : 0]   i2c_0_sda_oe;
    logic   [0       : 0]   i2c_0_scl_in;
    logic   [0       : 0]   i2c_0_scl_oe;
    logic   [7       : 0]   gpio_0_gpd;
    logic   [7       : 0]   gpio_0_gpi;
    logic   [7       : 0]   gpio_0_gpo;
    logic   [0       : 0]   uart_0_rxd;
    logic   [0       : 0]   uart_0_txd;
// CAM interface
`ifdef CAM
    logic   [0       : 0]   pll_0_c0;
    logic   [0       : 0]   pll_0_lock;
`endif // CAM

`ifdef CAM

`define     SDA     GPIO[16]
`define     SCL     GPIO[18]
`define     EXCK    GPIO[17]
`define     RST     GPIO[19]
    
`define     D1_00   GPIO[35]
`define     D1_01   GPIO[32]
`define     D1_02   GPIO[33]
`define     D1_03   GPIO[30]
`define     D1_04   GPIO[31]
`define     D1_05   GPIO[28]
`define     D1_06   GPIO[29]
`define     D1_07   GPIO[26]
`define     D1_08   GPIO[27]
`define     D1_09   GPIO[25]
`define     D1_10   GPIO[24]
`define     D1_11   GPIO[23]
`define     PCK_1   GPIO[34]
`define     LV_1    GPIO[21]
`define     FV_1    GPIO[22]
`define     STB_1   GPIO[20]

`define     D2_00   GPIO[15]
`define     D2_01   GPIO[12]
`define     D2_02   GPIO[13]
`define     D2_03   GPIO[10]
`define     D2_04   GPIO[11]
`define     D2_05   GPIO[8]
`define     D2_06   GPIO[9]
`define     D2_07   GPIO[6]
`define     D2_08   GPIO[7]
`define     D2_09   GPIO[4]
`define     D2_10   GPIO[5]
`define     D2_11   GPIO[2]
`define     PCK_2   GPIO[14]
`define     LV_2    GPIO[0]
`define     FV_2    GPIO[3]
`define     STB_2   GPIO[1]

    assign `RST = gpio_0_gpo[7] && pll_0_lock;
    assign `STB_2 = gpio_0_gpo[6];
    assign `STB_1 = gpio_0_gpo[5];

    assign i2c_0_scl_in = `SCL;
    assign i2c_0_sda_in = `SDA;
    assign `SCL = i2c_0_scl_oe ? 1'b0 : 1'bz;
    assign `SDA  = i2c_0_sda_oe ? 1'b0 : 1'bz;

    assign `D1_00 = 1'bz;
    assign `D1_01 = 1'bz;
    assign `D1_02 = 1'bz;
    assign `D1_03 = 1'bz;
    assign `D1_04 = 1'bz;
    assign `D1_05 = 1'bz;
    assign `D1_06 = 1'bz;
    assign `D1_07 = 1'bz;
    assign `D1_08 = 1'bz;
    assign `D1_09 = 1'bz;
    assign `D1_10 = 1'bz;
    assign `D1_11 = 1'bz;
    assign `PCK_1 = 1'bz;
    assign `LV_1  = 1'bz;
    assign `FV_1  = 1'bz;
    assign `D2_00 = 1'bz;
    assign `D2_01 = 1'bz;
    assign `D2_02 = 1'bz;
    assign `D2_03 = 1'bz;
    assign `D2_04 = 1'bz;
    assign `D2_05 = 1'bz;
    assign `D2_06 = 1'bz;
    assign `D2_07 = 1'bz;
    assign `D2_08 = 1'bz;
    assign `D2_09 = 1'bz;
    assign `D2_10 = 1'bz;
    assign `D2_11 = 1'bz;
    assign `PCK_2 = 1'bz;
    assign `LV_2  = 1'bz;
    assign `FV_2  = 1'bz;
`endif // CAM

    assign clk = MAX10_CLK1_50;
    assign rstn = KEY[0];
    assign dir = KEY[1];
    assign en = SW[0];

    assign GSENSOR_SDO = '1;
    assign GSENSOR_CS_N = '1;

`ifndef CAM
    assign LEDR[9 : 8] = cnt[width-1 -: 2];
    assign i2c_0_scl_in = GSENSOR_SCLK;
    assign i2c_0_sda_in = GSENSOR_SDI;
    assign GSENSOR_SCLK = i2c_0_scl_oe ? 1'b0 : 1'bz;
    assign GSENSOR_SDI  = i2c_0_sda_oe ? 1'b0 : 1'bz;
`endif // CAM

    assign gpio_0_gpi = SW[1 +: 8];
    assign LEDR[0 +: 8] = gpio_0_gpo;

    assign uart_0_rxd = ARDUINO_IO[0];
    assign ARDUINO_IO[1] = uart_0_txd;

`ifndef CAM
    counter
    #(
        .width      ( width     )
    )
    counter_0
    (
        .clk        ( clk       ),
        .rstn       ( rstn      ),
        .dir        ( dir       ),
        .en         ( en        ),
        .cnt        ( cnt       )
    );
`endif // CAM

    orca_systems
    orca_systems_0
    (
        .clk_clk        ( clk           ),
        .gpio_0_gpd     ( gpio_0_gpd    ),
        .gpio_0_gpi     ( gpio_0_gpi    ),
        .gpio_0_gpo     ( gpio_0_gpo    ),
        .reset_reset_n  ( rstn          ),
        .uart_0_rxd     ( uart_0_rxd    ),
        .uart_0_txd     ( uart_0_txd    ),
        .i2c_0_sda_in   ( i2c_0_sda_in  ),
        .i2c_0_scl_in   ( i2c_0_scl_in  ),
        .i2c_0_sda_oe   ( i2c_0_sda_oe  ),
        .i2c_0_scl_oe   ( i2c_0_scl_oe  )
    );

`ifdef CAM
    // pll unit
    pll
    pll_0
    (
        .inclk0     ( MAX10_CLK1_50     ),
        .c0         ( pll_0_c0          ),
        .locked     ( pll_0_lock        )
    );
    // clock buffer
    clk_buf
    clk_buf_0
    (
        .inclk      ( pll_0_c0          ),
        .ena        ( pll_0_lock        ),
        .outclk     ( `EXCK             )
    );
    // clock divider for cam 1
    clk_div
    #(
        .div_val    ( 96000000          )
    )
    clk_div_cam_1
    (
        .clk        ( `PCK_1            ),
        .rstn       ( rstn              ),
        .en         ( '1                ),
        .div        ( LEDR[8]           )
    );
    // clock divider for cam 2
    clk_div
    #(
        .div_val    ( 96000000          )
    )
    clk_div_cam_2
    (
        .clk        ( `PCK_2            ),
        .rstn       ( rstn              ),
        .en         ( '1                ),
        .div        ( LEDR[9]           )
    );

`endif // CAM_IF

//=======================================================
//  Structural coding
//=======================================================

endmodule
